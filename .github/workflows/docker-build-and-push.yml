name: Docker-Build

on:
  workflow_call:
    inputs:
      ADDITIONAL_VARIABLES:
        required: false
        type: string
      AWS_REGION:
        required: false
        type: string
        default: us-east-1
      CLEAR_CACHE:
        required: false
        type: boolean
        default: false
      CHECKOUT_IN2_REPOSITORIES:
        required: false
        type: boolean
        default: false
      CHECKOUT_IN2_REPOSITORY_NAMES:
        required: false
        type: string
      DOCKER_BUILD_ARGS:
        required: false
        type: string
      DOCKER_TARGET:
        required: false
        type: string
      ENVIRONMENT:
        required: false
        type: string
      BUILD:
        required: false
        type: string
        default: docker
      PUBLISH:
        required: false
        type: boolean
        default: false
      GH_SHA:
        required: false
        type: string
        default: ${{ github.sha }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      DOCKER_BUILD_ARGS:
        required: false
      REGISTRY:
        required: false
      TOKEN:
        required: false

env:
  ACCOUNT_IDS: ""
  ADDITIONAL_VARIABLES: ${{ inputs.ADDITIONAL_VARIABLES }}
  AWS_REGION: ${{ inputs.AWS_REGION }}
  DEFAULT_DOCKER_TAG: ${{ github.repository }}
  DOCKER_BUILD_ARGS: ${{ inputs.DOCKER_BUILD_ARGS }}
  DOCKER_SECRET_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
  DOCKER_TARGET: ${{ inputs.DOCKER_TARGET }}
  ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
  LOCAL_FILENAME: ""
  LOCAL_PATH: ""
  NODE_AUTH_TOKEN: ${{ secrets.TOKEN }}
  REGISTRY: ${{ secrets.REGISTRY }}
  VERSION: "1.${{ github.run_number }}.${{ github.run_attempt }}"
  GH_SHA: ${{ inputs.GH_SHA }}

jobs:
  build-and-push:
    runs-on: [ self-hosted, linux, intuitivo ]
    name: Build and Push
    concurrency:
      group: ${{ inputs.GH_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout ${{ inputs.CHECKOUT_IN2_REPOSITORY_NAMES }} repositories
        if: ${{ inputs.CHECKOUT_IN2_REPOSITORIES }}
        run: |
          ORG="${GITHUB_REPOSITORY_OWNER}"

          chmod +x ./scripts/*
          ./scripts/checkout_repositories.sh ${ORG} ${{ inputs.CHECKOUT_IN2_REPOSITORY_NAMES }}
      - name: Configure AWS credentials
        if: ${{ (inputs.BUILD == 'docker' || inputs.BUILD == 'layer' || inputs.BUILD == 'docker_s3' ) && inputs.PUBLISH }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Login to Amazon ECR
        if: ${{ ( inputs.BUILD == 'docker' || inputs.BUILD == 'docker_s3' ) && inputs.PUBLISH }}
        uses: aws-actions/amazon-ecr-login@v1
      - name: Login to AWS registry
        if: ${{ inputs.BUILD == 'docker' }}
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "763104351884" # AWS registry
      - name: Setup Node
        if: ${{ inputs.BUILD == 'npm' }}
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@intuitivo-ai'
      - id: check_image
        name: Check image already exists
        run: |
          ORG="$GITHUB_REPOSITORY_OWNER"
          REPOSITORY=$(echo "$GITHUB_REPOSITORY" | sed "s|$ORG/||g")

          export IMAGE=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=$GH_SHA)
          echo "exist=$(if [ -z "$IMAGE" ]; then echo 'false'; fi)"  >> $GITHUB_OUTPUT
          echo "IMAGE_TAG $image_tag=$(jq '.imageDetails[0].imageTags' <<< "$IMAGE")"
      - name: Build
        if: ${{ steps.check_image.outputs.exist == 'false' }}
        run: |
          chmod +x ./scripts/*
          ./scripts/build.sh ${{ inputs.BUILD }}
      - name: Publish
        if: ${{ inputs.PUBLISH && steps.check_image.outputs.exist == 'false' }}
        run: |
          chmod +x ./scripts/*
          ./scripts/publish.sh ${{ inputs.BUILD }}
      - name: Clear images
        if: ${{ inputs.CLEAR_CACHE && steps.check_image.outputs.exist == 'false' }}
        run: |
          IMAGE_ID=$(docker images -q $DEFAULT_DOCKER_TAG)
          docker rmi -f $IMAGE_ID
