name: Terraform Apply

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      LAMBDA:
        required: false
        type: boolean
        default: false
      TF_PATH:
        required: false
        type: string
        default: './'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  terraform-apply:
    runs-on: [ self-hosted, linux ]
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency:
      group: terraform-apply-${{ inputs.ENVIRONMENT }}
    name: Apply
    defaults:
      run:
        working-directory: ${{ inputs.TF_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: tests
        run: |
          new=${{ inputs.ENVIRONMENT }}/1/${{ github.run_number }}
          git tag $new
          git_refs_url=$(jq .repository.git_refs_url "$GITHUB_EVENT_PATH" | tr -d '"' | sed 's/{\/sha}//g')
          git_refs_response=$(
          curl -s -X POST "${git_refs_url}" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -d @- << EOF
        
          {
            "ref": "refs/tags/$new",
            "sha": "$GITHUB_SHA"
          }
          EOF
          )
          echo "${git_refs_response}"
          git_ref_posted=$( echo "${git_refs_response}" | jq .ref | tr -d '"' )
          echo "${git_ref_posted}"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Create lambda zip files
        if: ${{ inputs.LAMBDA }}
        run: cd .. ; ./scripts/create_zip_files.sh ; cd -
      - name: Init
        run: |
          terraform init -reconfigure -backend-config=${{ inputs.ENVIRONMENT }}.backend
      - name: Refresh state
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}"
          terraform apply -var-file=${{ inputs.ENVIRONMENT }}.tfvars -input=false -auto-approve -refresh-only
      - name: Plan
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}"
          terraform plan -var-file=${{ inputs.ENVIRONMENT }}.tfvars -input=false
      - name: Apply
        id: apply
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}"
          terraform apply -var-file=${{ inputs.ENVIRONMENT }}.tfvars -input=false -auto-approve
      - name: Create Tag
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.ENVIRONMENT }}/${{ github.run_number }}
          release_name: ${{ inputs.ENVIRONMENT }}/${{ github.run_number }}
      - name: Notification
        if: always()
        run: |
          aws lambda invoke --function-name main-slash-bot --invocation-type Event --payload '{"source":"gh-actions","env":"${{ inputs.ENVIRONMENT }}","repository":"${{ github.event.repository.name }}","username":"${{ github.actor }}","status":"${{ steps.apply.outcome }}"}' response.json
