name: Terraform Apply

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      LAMBDA:
        required: false
        type: boolean
        default: false
      TF_PATH:
        required: false
        type: string
        default: './'
      UPDATE_AWS_CLI:
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  terraform-apply:
    runs-on: [ self-hosted, linux ]
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency:
      group: terraform-apply-${{ inputs.ENVIRONMENT }}
    name: Apply
    defaults:
      run:
        working-directory: ${{ inputs.TF_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Create lambda zip files
        if: ${{ inputs.LAMBDA }}
        run: |
          cd ..
          chmod +x ./scripts/*
          ./scripts/create_zip_files.sh
          cd -
      - name: Update aws-cli
        if: ${{ inputs.UPDATE_AWS_CLI }}
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          /usr/local/bin/aws --version
      - name: Init
        run: |
          terraform init -reconfigure -backend-config=${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.backend
      - name: Refresh state
        id: state_lock
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}" TF_VAR_gh_run_number="${{ github.run_number }}" TF_VAR_gh_run_attempt="${{ github.run_attempt }}"
          terraform apply -var-file=${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.tfvars -input=false -auto-approve -refresh-only -lock-timeout=5m
      - name: Plan
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}" TF_VAR_gh_run_number="${{ github.run_number }}" TF_VAR_gh_run_attempt="${{ github.run_attempt }}"
          terraform plan -var-file=${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.tfvars -input=false -lock-timeout=5m
      - name: Apply
        id: apply
        run: |
          export TF_VAR_commit_id="${GITHUB_SHA}" TF_VAR_gh_run_number="${{ github.run_number }}" TF_VAR_gh_run_attempt="${{ github.run_attempt }}"
          terraform apply -var-file=${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.tfvars -input=false -auto-approve -lock-timeout=5m
      - name: Unlock
        if: ${{ cancelled() || steps.state_lock.outcome != 'success' }}
        run: |
          chmod +x ../scripts/*
          ../scripts/terraform_unlock.sh
      - name: Create Tag
        run: git tag -f "${{ inputs.ENVIRONMENT }}/${{ github.run_number }}" && git push -f origin "${{ inputs.ENVIRONMENT }}/${{ github.run_number }}"
      - name: Notification
        if: always()
        run: |
          aws lambda invoke --function-name main-slash-bot --invocation-type Event --payload '{"source":"gh-actions","env":"${{ inputs.ENVIRONMENT }}","repository":"${{ github.event.repository.name }}","username":"${{ github.actor }}","status":"${{ steps.apply.outcome }}"}' response.json